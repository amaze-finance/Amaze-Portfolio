{
    "methods": {
        "observe(uint32[])": {
            "stateMutability": "view",
            "code": "function observe(uint32[] secondsAgos) external view returns (int56[] tickCumulatives, uint160[] secondsPerLiquidityCumulativeX128s)",
            "inputs": {
                "secondsAgos": {
                    "type": "uint32[]",
                    "description": "From how long ago each cumulative tick and liquidity value should be returned"
                }
            },
            "outputs": {
                "tickCumulatives": {
                    "type": "int56[]",
                    "description": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
                },
                "secondsPerLiquidityCumulativeX128s": {
                    "type": "uint160[]",
                    "description": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp"
                }
            },
            "notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp",
            "details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio."
        },
        "snapshotCumulativesInside(int24,int24)": {
            "stateMutability": "view",
            "code": "function snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside)",
            "inputs": {
                "tickLower": {
                    "type": "int24",
                    "description": "The lower tick of the range"
                },
                "tickUpper": {
                    "type": "int24",
                    "description": "The upper tick of the range"
                }
            },
            "outputs": {
                "tickCumulativeInside": {
                    "type": "int56",
                    "description": "The snapshot of the tick accumulator for the range"
                },
                "secondsPerLiquidityInsideX128": {
                    "type": "uint160",
                    "description": "The snapshot of seconds per liquidity for the range"
                },
                "secondsInside": {
                    "type": "uint32",
                    "description": "The snapshot of seconds per liquidity for the range"
                }
            },
            "notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range",
            "details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken."
        }
    },
    "events": {},
    "errors": {},
    "path": "v3-core/contracts/interfaces/pool",
    "title": "Pool state that is not stored",
    "notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
    "name": "IUniswapV3PoolDerivedState"
}